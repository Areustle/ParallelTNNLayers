#if GOOGLE_CUDA
#define EIGEN_USE_GPU

__global__ void default_function_kernel0(const float* __restrict__ Data,
    const float* __restrict__ K0,
    const float* __restrict__ K1,
    const float* __restrict__ K2,
    float* __restrict__ Output) {
   float Output_local[1];
  __shared__ float Data_shared[16];
  __shared__ float K0_shared[32];
  __shared__ float K1_shared[32];
  __shared__ float K2_shared[2];
  Output_local[0] = 0.000000e+00f;
  for (int rr_outer = 0; rr_outer < 86; ++rr_outer) {
    for (int rs0_outer = 0; rs0_outer < 2; ++rs0_outer) {
      for (int rs1_outer = 0; rs1_outer < 2; ++rs1_outer) {
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer)];
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 688)];
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 1376)];
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 2064)];
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 2752)];
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            if (10 < ((16 - ((int)threadIdx.z)) - ((int)threadIdx.y))) {
              K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 3440)];
            }
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            if (12 < ((16 - ((int)threadIdx.z)) - ((int)threadIdx.y))) {
              K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 4128)];
            }
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        __syncthreads();
        Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] = Data[(((((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) / 16) * 4096) + (((((((int)threadIdx.z) * 4) + ((int)threadIdx.y)) % 16) / 4) * 256)) + (((int)threadIdx.y) * 16)) + ((int)blockIdx.x))];
        K0_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K0[((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K0_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K0[(((((rs0_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        K1_shared[((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2))] = K1[((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer)];
        K1_shared[(((((int)threadIdx.z) * 8) + (((int)threadIdx.y) * 2)) + 1)] = K1[(((((rs1_outer * 2752) + (((int)threadIdx.z) * 688)) + (((int)threadIdx.y) * 172)) + rr_outer) + 86)];
        if (((int)threadIdx.y) < (2 - ((int)threadIdx.z))) {
          if (((int)threadIdx.y) < 1) {
            if (14 < ((16 - ((int)threadIdx.z)) - ((int)threadIdx.y))) {
              K2_shared[(((int)threadIdx.y) + ((int)threadIdx.z))] = K2[(((((((int)threadIdx.y) * 344) + (((int)threadIdx.z) * 344)) + (((int)blockIdx.x) * 86)) + rr_outer) + 4816)];
            }
          }
        }
        __syncthreads();
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[((int)threadIdx.z)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 4)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 8)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 12)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 16)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 20)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 24)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[((int)threadIdx.y)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 4)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 8)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 12)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 16)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 20)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 24)]) * K2_shared[1]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[0]));
        Output_local[0] = (Output_local[0] + (((Data_shared[((((int)threadIdx.z) * 4) + ((int)threadIdx.y))] * K0_shared[(((int)threadIdx.z) + 28)]) * K1_shared[(((int)threadIdx.y) + 28)]) * K2_shared[1]));
      }
    }
  }
  Output[(((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 4)) + ((int)blockIdx.x))] = Output_local[0];
}


void DenseCpKernelLauncher(const float* U, const float* K0,
    const float* K1, const float* KC, float* V){

  dim3 gridDim0(4, 1, 1);
  dim3 blockDim0(1, 4, 4);

  default_function_kernel0<<<gridDim0, blockDim0>>>(U, K0, K1, KC, V);
  cudaDeviceSynchronize();

}

#endif
